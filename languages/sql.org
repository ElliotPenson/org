#+TITLE: SQL
#+AUTHOR: Elliot Penson

SQL (Structured Query Language) is a language for interacting with relational
databases in an RDBMS. This page was created with reference to Ben Forta's [[http://forta.com/books/0672336073/][book
on SQL]].

* Terms

  - A *table* is a structured list of data of a specific, consistent type.
  - A *schema* describes table layout (and other information about the
    database).
  - A table consists of *columns* and *rows*.
    - Each column is a single field with an associated data type.
    - Each row is a record in a table.
  - Every row in a table should have some column (or set of columns) that
    uniquely identified it. This is called a *primary key*. Primary keys must be
    unique and shouldn't be reused.

* ~SELECT~

  The ~SELECT~ statement retrieves information from one or more tables. At
  minimum, you must specify what you want to select and from where you want to
  select it.

  #+BEGIN_SRC sql
    -- Retrieve a single column.
    SELECT first_name FROM People;

    -- Retrieve multiple columns.
    SELECT id, first_name, last_name FROM People;

    -- Retrieve all columns.
    SELECT * FROM People;
  #+END_SRC

** Unique Values

   Use the ~DISTINCT~ keyword to find unique rows. Note that the keyword applies
   to all columns, not just the one it precedes.

   #+BEGIN_SRC sql
     SELECT DISTINCT first_name FROM People;
   #+END_SRC

** Limit Results

   Use the ~LIMIT~ keyword to control the number of rows returned. Note that SQL
   implementations differ here.

   #+BEGIN_SRC sql
     SELECT first_name FROM People LIMIT 5;

     -- Start from row 5.
     SELECT first_name FROM People LIMIT 5 OFFSET 5;
   #+END_SRC

** Sorting

   Use the ~ORDER BY~ clause to sort data retrieved using a ~SELECT~. Be sure
   that the ~ORDER BY~ clause is the last clause in your ~SELECT~ statement.

   #+BEGIN_SRC sql
     SELECT first_name FROM People ORDER BY first_name;

     -- Sort by multiple column names.
     SELECT id FROM People ORDER BY first_name, last_name;

     -- Sort in descending order (Z to A).
     SELECT email FROM People ORDER BY first_name DESC;
   #+END_SRC

** Filtering

   Use the ~WHERE~ clause to filter data retrieved by the ~SELECT~
   statement. The ~WHERE~ clause is specified right after the table name. ~AND~,
   ~OR~, and ~NOT~ may be used in where clauses. SQL (like most languages)
   processes ~AND~ operators before ~OR~ operators. Use parenthesis to
   explicitly group related operators.

   #+BEGIN_SRC sql
     SELECT first_name, last_name FROM People WHERE age = 21;

     SELECT first_name FROM People WHERE last_name = 'Penson' AND age <= 30;

     SELECT first_name FROM People WHERE last_name = 'Penson' OR last_name = 'Bland';

     SELECT first_name FROM People WHERE NOT last_name = 'Penson';
   #+END_SRC

   The ~IN~ operator is used to specify a range of conditions, any of which can
   be matched.

   #+BEGIN_SRC sql
     SELECT last_name FROM People WHERE zip IN ('20005', '20036') ORDER BY last_name;
   #+END_SRC

   Various operators are allowed. Note that single quotes should be used for
   string literals.

   | Operator              | Description                  |
   |-----------------------+------------------------------|
   | ~=~                   | Equality                     |
   | ~<>~ or ~!=~          | Non-equality                 |
   | ~<~                   | Less than                    |
   | ~<=~                  | Less than or equal to        |
   | ~!<~                  | Not less than                |
   | ~>~                   | Greater than                 |
   | ~>=~                  | Greater than or equal to     |
   | ~!>~                  | Not greater than             |
   | ~BETWEEN <a> AND <b>~ | Between two specified values |
   | ~IS NULL~             | Is a ~NULL~ value.           |

** Wildcards

   To use wildcards in search clauses, the ~LIKE~ operator must be
   used. Wildcard searching can only be used with text fields. The ~%~ sign
   matches any number of occurrences of any character. The underscore (~_~)
   matches any single character.

   #+BEGIN_SRC sql
     SELECT email FROM People WHERE email LIKE '%@gmail.com';

     -- Find People (babies) with single digit heights.
     SELECT height FROM People WHERE heigh LIKE '_ inches';
   #+END_SRC

** Calculated Fields

   A calculated field is created on-the-fly within a SQL ~SELECT~
   statement. Concatenate strings with the ~||~ operator. SQL supports
   mathematical operators like ~+~, ~-~, ~*~, and ~/~.

   #+BEGIN_SRC sql
     SELECT last_name || ', ' || first_name FROM People;

     SELECT item_price * quantity FROM Orders;
   #+END_SRC

   An alias is an alternate name for a field or value. Aliases are assigned with
   the ~AS~ keyword.

   #+BEGIN_SRC sql
      SELECT last_name || ', ' || first_name AS name FROM People ORDER BY name;
   #+END_SRC

   SQL also provides a variety of functions for manipulating values.
   Unfortunately, functions tend to be very DBMS specific. Unlike SQL
   statements, SQL functions are not portable. Be sure to look at documentation
   for your specific SQL implementation!
