#+TITLE: Kubernetes Objects
#+AUTHOR: Elliot Penson

* Pods

  A *pod* is a group of one or more containers. A pod's containers are deployed
  together and started, stoped, and replicated as a group. A *pod definition* is
  a declaration of a *desired state*. Kubernetes' responsibility is to make sure
  that the current state matches the desired state.

  #+BEGIN_SRC yaml
    apiVersion: v1
    kind: Pod
    metadata:
      name: ...
    spec:
      containers:
        name: ...
        image: ...
        env: ...
  #+END_SRC

  #+BEGIN_SRC sh
    kubectl create -f <yaml-path>
    kubectl get pods
    kubetcl delete pod <name>
  #+END_SRC

* Volumes

  A container file system only lives as long as the container does. A *volume*
  lets the application's state survive relocation, reboots, and crashes. Specify
  this persistent storage in your pod definition. Volumes may be mounted in
  multiple containers. Volume types include ~EmptyDir~ (for new directories) and
  ~HostPath~ (for existing directories). One may prevent a container from
  writing to a volume with ~readOnly: true~.

  #+BEGIN_SRC yaml
     ...
     kind: Pod
     spec:
       containers:
       - name: ...
         volumeMounts:
         - mountPath: ...
           name: <volume-name>
       volumes:
       - name: <volume-name>
         emptyDir: {}
  #+END_SRC

* Labels

  Labels are key-value pairs that are attached to objects in Kubernetes. Add a
  label under ~metadata~ in the pod definition. Labels are a core concept used
  by other Kubernetes building blocks (replication controllers and services).

  #+BEGIN_SRC yaml
    ...
    kind: Pod
    metadata:
      name: example
      labels:
        <key>: <value>
    spec:
      containers:
        ...
  #+END_SRC

  Pods may be queried with label selectors.

  #+BEGIN_SRC sh
    kubectl get pods -l <key>=<value>
  #+END_SRC

* Replication Controllers

  A replication controller combines a template for pod creation (a
  "cookie-cutter") and a number of desired replicas, into a single Kubernetes
  object. The replication controller also contains a label selector that
  identifies the set of objects managed.

  #+BEGIN_SRC yaml
    apiVersion: v1
    kind: ReplicationController
    metadata:
      name: <name>
    spec:
      replicas: 2
      selector:
        <key>: <value>  # label(s)
      template:  # pod template
        metadata:
          labels:
            <key>: <value>
        spec:
          containers:
            ...
  #+END_SRC

  #+BEGIN_SRC sh
    kubectl create -f <yaml-path>
    kubectl get rc
    kubectl delete rc <name>
  #+END_SRC

* Services

  A *service* is an abstraction that refers to a set of pods using a single
  static IP address. Services may provide load balancing.

  #+BEGIN_SRC yaml
    apiVersion: v1
    kind: Service
    metadata:
      name: <name>
    spec:
      ports:
      - port: <port>
        ...
      selector:
        <key>:<value>  # label(s)
  #+END_SRC

  #+BEGIN_SRC sh
    kubectl create -f <yaml-path>
    kubectl get services
    kubectl delete service <name>
  #+END_SRC
